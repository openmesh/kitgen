package log

import (
	"context"
	"time"

	"github.com/go-kit/kit/log"
)

func {{ pascalize .Name }}LoggingMiddleware(logger log.Logger) domain.{{ pascalize .Name }}ServiceMiddleware {
  return func(next domain.{{ pascalize .Name }}Service) domain.{{ pascalize .Name}}Service {
    return {{ .Name }}LoggingMiddleware{logger, next}
  }
}

type {{ .Name }}LoggingMiddleware struct {
  logger log.Logger
  next domain.{{ pascalize .Name }}Service
}

{{ range .Operations }}
func (mw *{{ $.Name }}LoggingMiddleware) {{ pascalize .Name }}(ctx context.Context{{ range .Params }}, {{ .Name }} {{ .GoType }}{{ end }}) ({{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}_ {{ .SuccessResponse.Schema.GoType }},{{ end }}{{ end }} err error) {
	defer func(begin time.Time) {
		_ = mw.logger.Log(
			"method", "{{ (snakize (pascalize .Name)) }}",{{ range .Params }}
			"{{ .Name }}", {{ .Name }},{{ end }}
			"took", time.Since(begin),
			"error", err,
		)
	}(time.Now())
	return mw.next.{{ pascalize .Name}}(ctx{{ range .Params }}, {{ .Name }}{{ end }})
}
{{ end }}