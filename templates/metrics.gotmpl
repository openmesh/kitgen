package metrics

import (
  "context"
  "time"

  "github.com/go-kit/kit/metrics"
)

func {{ pascalize .Name }}MetricsMiddleware(
  requestCount metrics.Counter,
  errorCount metrics.Counter,
  requestDuration metrics.Histogram,
) domain.{{ pascalize .Name }}ServiceMiddleware {
  return func(next domain.{{ pascalize .Name }}Service) domain.{{ pascalize .Name}}Service {
    return {{ .Name }}MetricsMiddleware{requestCount, errorCount, requestDuration, next}
  }
}

type {{ .Name }}MetricsMiddleware struct {
	requestCount    metrics.Counter
	errorCount      metrics.Counter
	requestDuration metrics.Histogram
  next domain.{{ pascalize .Name }}Service
}

{{ range .Operations }}
func (mw *{{ $.Name }}MetricsMiddleware) {{ pascalize .Name }}(ctx context.Context{{ range .Params }}, {{ .Name }} {{ .GoType }}{{ end }}) ({{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}_ {{ .SuccessResponse.Schema.GoType }},{{ end }}{{ end }} err error) {
	defer func(begin time.Time) {
    lvs := []string{"method", "{{ (snakize (pascalize .Name)) }}"}
    mw.requestCount.With(lvs...).Add(1)
    mw.requestDuration.With(lvs...).Observe(time.Since(begin).Seconds())
    if err != nil {
      mw.errorCount.With(lvs...).Add(1)
    }
	}(time.Now())
	return mw.next.{{ pascalize .Name}}(ctx{{ range .Params }}, {{ .Name }}{{ end }})
}
{{ end }}